{
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json",
  "version": "Notebook/1.0",
  "isLocked": true,
  "items": [
    {
      "type": 1,
      "content": {
        "json": "### Define your Cohort\r\nPlace text in the filter below to define a cohort for this blade. You can save your changes to save this cohort. The filter you supply will be respected by all charts on the page.\r\n\r\nExample cohort:\r\n\r\n| where client_City == \"Seattle\"\r\n"
      },
      "conditionalVisibility": {
        "parameterName": "DontShow",
        "comparison": "isNotEqualTo"
      },
      "name": "text - 13"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "8ba9838b-d1af-442e-b428-2af8a069d938",
            "version": "KqlParameterItem/1.0",
            "name": "Cohort",
            "type": 1,
            "isHiddenWhenLocked": true
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "name": "parameters - 14"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "e0be2fbd-d6c8-4ce1-a7c2-15c01f11a689",
            "version": "KqlParameterItem/1.0",
            "name": "UsersList",
            "label": "Show sessions for",
            "type": 2,
            "isRequired": true,
            "query": "datatable(value:string, text:string)[\r\n'user_Id', 'Users', \r\n'user_AuthenticatedId', 'Authenticated Users'\r\n]",
            "value": "user_Id",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "85ec3bbc-6f6c-41b4-9750-7a28109a46a9",
            "version": "KqlParameterItem/1.0",
            "name": "Whoused",
            "type": 2,
            "isRequired": true,
            "query": "datatable(value:string, text:string)[\r\n'pageViews,customEvents,requests', 'Any Custom Events, Request or Page View', \r\n'pageViews,customEvents', 'Any Custom Events or Page View', \r\n'customEvents','Any Custom Event', \r\n'pageViews','Any Page View', \r\n'requests','Any Request'\r\n]",
            "value": "pageViews,customEvents",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components",
            "label": "Who used"
          },
          {
            "id": "6f863be6-e561-4a49-b854-b8a533a8e5b3",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "During",
            "type": 2,
            "isRequired": true,
            "query": "datatable(value:string, text:string)[\r\n'1h', 'Last hour', \r\n'24h', 'Last 24 hours', \r\n'48h', 'Last 48 hours', \r\n'3d', 'Last 3 days',\r\n'7d', 'Last 7 days',\r\n'14d', 'Last 14 days',\r\n'30d', 'Last 30 days',\r\n'60d', 'Last 60 days',\r\n'90d', 'Last 90 days'\r\n]",
            "value": "24h",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "36cf034d-8525-41b1-9489-b6786bc12586",
            "version": "KqlParameterItem/1.0",
            "name": "WithGrain",
            "type": 1,
            "isRequired": true,
            "query": "let grainList = datatable(grain:string, text:string)[\r\n'3m', '1h', \r\n'1h', '24h',\r\n'2h', '48h',\r\n'3h', '3d',\r\n'1d','7d',\r\n'1d','14d',\r\n'1d','30d',\r\n'1d','60d',\r\n'1d','90d'\r\n];\r\ngrainList\r\n| where text == '{TimeRange}'\r\n| project grain",
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "e97dd0cb-940a-481c-950f-4e60f197430f",
            "version": "KqlParameterItem/1.0",
            "name": "UserEvent",
            "label": "Selected events",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "let timeRange = {TimeRange};\r\nunion {Whoused}\r\n    | where timestamp > ago(timeRange)\r\n    | project name, itemType\r\n    | order by itemType,name asc\r\n    | summarize test = count() by itemType,name\r\n    | project Id=name, Title=name, Selected=false\r\n    | union (\r\ndatatable(Id:string, Title:string, Selected:boolean)[\r\n'*', 'All', true\r\n])",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components",
            "value": [
              "*"
            ]
          },
          {
            "id": "757b0ecb-fdca-4114-96fe-af39a360b2e7",
            "version": "KqlParameterItem/1.0",
            "name": "ByType",
            "label": "By type",
            "type": 2,
            "isRequired": true,
            "value": "Time",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\"Time\", \"Property\"]"
          },
          {
            "id": "35b08baf-a026-4c26-9ab3-87a7a8b24d56",
            "version": "KqlParameterItem/1.0",
            "name": "CountBy",
            "label": "By value",
            "type": 2,
            "isRequired": true,
            "query": "let byType = \"{ByType}\";\r\nlet getTableSchema = (table: (*), tableName: string) { \r\n\ttable\r\n            | project  column_ifexists(\"customDimensions\",'')\r\n            | evaluate bag_unpack(column_ifexists(\"customDimensions\",''))\r\n            | getschema \r\n            | project ColumnName=strcat(\"customDimensions['\", ColumnName, \"']\"), ColumnType, TableName=tableName};\r\nlet t1 = getTableSchema(pageViews, 'pageViews');\r\nlet t2 = getTableSchema(customEvents, 'customEvents');\r\nlet t3 = getTableSchema(requests, 'requests');\r\nlet t = totimespan({TimeRange});\r\nlet grainList = datatable(ColumnName:string, text:string)[\r\n\t'3m', '1h', \r\n\t'1h', '24h',\r\n\t'2h', '48h',\r\n\t'3h', '3d',\r\n\t'1d','7d',\r\n\t'12h','7d',\r\n\t'1d','14d',\r\n\t'1d','30d',\r\n\t'7d','30d',\r\n\t'1d','60d',\r\n\t'7d','60d',\r\n\t'1d','90d',\r\n\t'7d','90d',\r\n\t];\r\nlet timeTable = grainList\r\n    | where text == '{TimeRange}'\r\n    | extend Type =\"Time\"\r\n    | project Property = ColumnName, ColumnName, Type;\r\nlet customDimension =  union t1, t2, t3\r\n            |  where ColumnType == 'string'\r\n            | where '{Whoused}' contains TableName\r\n            | summarize count() by ColumnName\r\n            | project ColumnName, Type ='Property';\r\n            \r\nunion (datatable(Property:string, ColumnName:string, Type: string)[\r\n\t'application_Version', 'Application version', 'Property',\r\n\t'user_AuthenticatedId', 'Authenticated or anonymous traffic', 'Property',\r\n\t'client_Browser', 'Browser version', 'Property',\r\n\t'client_City', 'City', 'Property',\r\n\t'cloud_RoleInstance', 'Cloud role instance', 'Property',\r\n\t'cloud_RoleName', 'Cloud role name', 'Property',\r\n\t'client_CountryOrRegion', 'Country or region', 'Property',\r\n\t'client_Model', 'Device model', 'Property',\r\n\t'client_Type', 'Device type', 'Property',\r\n\t'operation_SyntheticSource', 'Is real user traffic', 'Property',\r\n    'name', 'Name', 'Property',\r\n\t'client_OS', 'Operating system', 'Property',\r\n\t'operation_Name', 'Operation name', 'Property',\r\n\t'performanceBucket', 'Performance', 'Property',\r\n\t'tostring(parseurl(url)[\"Host\"])', 'URL host', 'Property',\r\n\t'tostring(parseurl(url)[\"Path\"])', 'URL path', 'Property',\r\n\t'source', 'Request source', 'Property',\r\n\t'resultCode', 'Response code', 'Property',\r\n\t'operation_SyntheticSource', 'Source of synthetic traffic', 'Property',\r\n\t'client_CountryOrRegion', 'State or province', 'Property',\r\n\t'success', 'Successful request', 'Property'\r\n\t]), customDimension, timeTable \r\n\t| where Type == byType\r\n    | project Property, ColumnName",
            "value": "1h",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "448a34d9-8cd7-455e-9699-a8c04130fb81",
            "version": "KqlParameterItem/1.0",
            "name": "SplitBy",
            "label": "Split by",
            "type": 2,
            "query": "let getTableSchema = (table: (*), tableName: string) { table\r\n            | project  column_ifexists(\"customDimensions\",'')\r\n            | evaluate bag_unpack(column_ifexists(\"customDimensions\",''))\r\n            | getschema \r\n            | project ColumnName=strcat(\"customDimensions['\", ColumnName, \"']\"), ColumnType, TableName=tableName };\r\n            let t1 = getTableSchema(pageViews, 'pageViews');\r\n            let t2 = getTableSchema(customEvents,'customEvents');\r\n            let t3 = getTableSchema(requests, 'requests');\r\nlet customDimension =  union t1, t2, t3\r\n            |  where ColumnType == 'string'\r\n            | where '{Whoused}' contains TableName or TableName == ''\r\n            | summarize count() by ColumnName \r\n            | project Property = ColumnName, ColumnName\r\n            | order by ColumnName asc;\r\nunion (datatable(Property:string, ColumnName:string)[\r\n\t'application_Version', 'Application version', \r\n\t'user_AuthenticatedId', 'Authenticated or anonymous traffic', \r\n\t'client_Browser', 'Browser version', \r\n\t'client_City', 'City', \r\n\t'cloud_RoleInstance', 'Cloud role instance', \r\n\t'cloud_RoleName', 'Cloud role name', \r\n\t'client_CountryOrRegion', 'Country or region', \r\n\t'client_Model', 'Device model', \r\n\t'client_Type', 'Device type', \r\n\t'operation_SyntheticSource', 'Is real user traffic', \r\n        'name', 'Name', \r\n\t'client_OS', 'Operating system', \r\n\t'operation_Name', 'Operation name', \r\n\t'performanceBucket', 'Performance', \r\n\t'tostring(parseurl(url)[\"Host\"])', 'URL host', \r\n\t'tostring(parseurl(url)[\"Path\"])', 'URL path', \r\n\t'source', 'Request source', \r\n\t'resultCode', 'Response code', \r\n\t'operation_SyntheticSource', 'Source of synthetic traffic', \r\n\t'client_CountryOrRegion', 'State or province', \r\n\t'success', 'Successful request'\r\n\t]), customDimension\r\n    | extend Type = 'Property'\r\n    | where Type != '{ByType}'",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "name": "parameters - 2"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let timeRange = {TimeRange};\r\nunion {Whoused}\r\n    | where timestamp > ago(timeRange)\r\n    {Cohort}\r\n    | where iif('*' in ({UserEvent}), 1==1, name in ({UserEvent}))\r\n    | summarize Sessions = dcount(session_Id)\r\n    | evaluate narrow()\r\n    | extend Value = toreal(Value)",
        "size": 3,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Column",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto",
              "showIcon": true
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "style": "decimal",
                "useGrouping": false,
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 3
              }
            }
          },
          "showBorder": false
        }
      },
      "name": "query - 5"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let timeRange = {TimeRange};\r\nlet grain = {CountBy}; \r\nunion {Whoused}\r\n    | where timestamp > bin(ago(timeRange), grain) \r\n    {Cohort}\r\n    | where iif('*' in ({UserEvent}), 1==1, name in ({UserEvent}))\r\n    | summarize Sessions = dcount({UsersList}) by bin(timestamp, grain)\r\n    | order by timestamp asc",
        "size": 0,
        "aggregation": 3,
        "showAnalytics": true,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "barchart",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Column",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto",
              "showIcon": true
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 3
              }
            }
          },
          "showBorder": false
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SplitBy",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "ByType",
          "comparison": "isEqualTo",
          "value": "Time"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "SplitBy",
        "comparison": "isEqualTo"
      },
      "showPin": true,
      "name": "query - 3"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let timeRange = {TimeRange};\r\nunion {Whoused}\r\n    | where timestamp > ago(timeRange)\r\n    {Cohort}\r\n    | where iif('*' in ({UserEvent}), 1==1, name in ({UserEvent}))\r\n    | extend dimension = columnifexists('{CountBy}','') \r\n    | extend dimension = iif(isempty(dimension), \"<undefined>\", dimension)\r\n    | summarize Sessions = dcount({UsersList}) by dimension \r\n    | order by dimension asc",
        "size": 0,
        "showAnalytics": true,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "barchart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SplitBy",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "ByType",
          "comparison": "isNotEqualTo",
          "value": "Time"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "SplitBy",
        "comparison": "isEqualTo"
      },
      "showPin": true,
      "name": "query - 8"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let timeRange = {TimeRange};\nlet mainTable = union {Whoused}\n    | where timestamp > bin(ago(timeRange), {CountBy})\n    {Cohort}\n    | where iif('*' in ({UserEvent}), 1==1, name in ({UserEvent}));\nlet cohortedTable = mainTable     \n    | extend dimension = columnifexists('{SplitBy}','') \n    | extend dimension = iif(isempty(dimension), \"<undefined>\", dimension)\n    | extend byDimension = bin(timestamp, {CountBy})\n    | summarize metricHll = hll(session_Id) by byDimension, dimension;\nlet topSegments = cohortedTable\n    | summarize mergedMetricHll = hll_merge(metricHll) by dimension\n    | project dimension, dcount_session_Id = dcount_hll(mergedMetricHll)\n    | top 5 by dcount_session_Id desc nulls last\n    | summarize makelist(dimension);\ncohortedTable\n    | extend dimension = iff(dimension in (topSegments), dimension, \"Other\")\n    | project byDimension, dimension, metricHll\n    | fork(summarize metric = hll_merge(metricHll) by byDimension, dimension\n    | project byDimension, dimension, metric = dcount_hll(metric))\n    (summarize metric = hll_merge(metricHll) by dimension | project dimension, metric = dcount_hll(metric))\n    (summarize metric = hll_merge(metricHll) | project metric = dcount_hll(metric))\n    ",
        "size": 0,
        "aggregation": 3,
        "showAnalytics": true,
        "title": "Split by dimension (Top 5)",
        "color": "blue",
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "barchart",
        "chartSettings": {
          "xSettings": {
            "unit": 17,
            "min": null,
            "max": null
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SplitBy",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ByType",
          "comparison": "isEqualTo",
          "value": "Time"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "SplitBy",
        "comparison": "isNotEqualTo"
      },
      "showPin": true,
      "name": "query - 2"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let timeRange = {TimeRange};\r\nlet mainTable = union {Whoused}\r\n    | where timestamp > ago(timeRange)\r\n    {Cohort}\r\n    | where iif('*' in ({UserEvent}), 1==1, name in ({UserEvent}));\r\nlet cohortedTable = mainTable     \r\n    | extend dimension = columnifexists('{SplitBy}','') \r\n    | extend dimension = iif(isempty(dimension), \"<undefined>\", dimension)\r\n    | extend byDimension = columnifexists('{CountBy}','')\r\n    | extend byDimension = iif(isempty(byDimension), \"<undefined>\", byDimension)\r\n    | summarize metricHll = hll(session_Id) by byDimension, dimension;\r\nlet topSegments = cohortedTable\r\n    | summarize mergedMetricHll = hll_merge(metricHll) by dimension\r\n    | project dimension, dcount_session_Id = dcount_hll(mergedMetricHll)\r\n    | top 5 by dcount_session_Id desc nulls last\r\n    | summarize makelist(dimension);\r\ncohortedTable\r\n    | extend dimension = iff(dimension in (topSegments), dimension, \"Other\")\r\n    | project byDimension, dimension, metricHll\r\n    | fork(summarize metric = hll_merge(metricHll) by dimension,byDimension\r\n    | project byDimension, dimension, metric = dcount_hll(metric))\r\n    (summarize metric = hll_merge(metricHll) by dimension | project dimension, metric = dcount_hll(metric))\r\n    (summarize metric = hll_merge(metricHll) | project metric = dcount_hll(metric))\r\n    ",
        "size": 0,
        "showAnalytics": true,
        "title": "Split by dimension (Top 5)",
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "barchart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "SplitBy",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ByType",
          "comparison": "isNotEqualTo",
          "value": "Time"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "SplitBy",
        "comparison": "isNotEqualTo"
      },
      "showPin": true,
      "name": "query - 9"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "    let timeRange = {TimeRange};\r\n   union {Whoused}\r\n    | where timestamp > ago(timeRange)\r\n    {Cohort}\r\n    | where iif('*' in ({UserEvent}), 1==1, name in ({UserEvent}))\r\n    | summarize USERS = dcount(user_Id), EVENTS = count()\r\n    | evaluate narrow()\r\n    | extend Value = toreal(Value)\r\n    | project Column, Value, id = case(Column =='USERS', 'community-Workbooks%2FUsageMetrics%2FUsage%20-%20Users', 'community-Workbooks%2FUsageMetrics%2FUsage%20-%20Events')",
        "size": 3,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Column",
            "formatter": 1,
            "formatOptions": {
              "linkColumn": "id",
              "linkTarget": "WorkbookTemplate",
              "showIcon": true,
              "workbookContext": null
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto",
              "showIcon": true
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "style": "decimal",
                "useGrouping": false,
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 3
              }
            }
          },
          "showBorder": true
        }
      },
      "name": "query - 5"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let timeRange = {TimeRange};\r\nlet mainTable  = union {Whoused}\r\n        | where timestamp > ago(timeRange)\r\n        {Cohort}\r\n        | where iif('*' in ({UserEvent}), 1==1, name in ({UserEvent}));\r\nlet cohortedTable = mainTable        \r\n        | extend dimension = client_CountryOrRegion\r\n        | extend dimension = iif(isempty(dimension), \"<undefined>\", dimension)\r\n        | summarize hll = hll(session_Id) by dimension\r\n        | extend Sessions = dcount_hll(hll)\r\n        | order by Sessions desc\r\n        | serialize rank = row_number()\r\n        | extend dimension = iff(rank > 5, 'Other', dimension)\r\n        | summarize merged = hll_merge(hll) by dimension\r\n        | project [\"Country or region\"] = dimension, Counts = dcount_hll(merged)\r\n        | order by Counts desc;\r\n        cohortedTable\r\n        ",
        "size": 3,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "table",
        "showExpandCollapseGrid": true,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Counrty or region",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Counts",
              "formatter": 4,
              "formatOptions": {
                "palette": "turquoise",
                "showIcon": true
              }
            }
          ]
        }
      },
      "customWidth": "33",
      "name": "query - 6"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let timeRange = {TimeRange};\r\nlet mainTable  = union {Whoused}\r\n        | where timestamp > ago(timeRange)\r\n        {Cohort}\r\n        | where iif('*' in ({UserEvent}), 1==1, name in ({UserEvent}));\r\nlet cohortedTable = mainTable  \r\n        | extend  dimension = client_OS\r\n        | extend OS = iif(isempty(dimension) , \"<undefined>\", dimension)\r\n        | summarize hll = hll(session_Id) by dimension\r\n        | extend Sessions = dcount_hll(hll)\r\n        | order by Sessions desc\r\n        | serialize rank = row_number()\r\n        | extend dimension = iff(rank > 5, 'Other', dimension)\r\n        | summarize merged = hll_merge(hll) by dimension\r\n        | project ['Operating system'] = dimension, Counts = dcount_hll(merged);\r\n        cohortedTable\r\n        ",
        "size": 3,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Operating system",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Counts",
              "formatter": 4,
              "formatOptions": {
                "palette": "turquoise",
                "showIcon": true
              }
            }
          ]
        }
      },
      "customWidth": "33",
      "name": "query - 7"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let timeRange = {TimeRange};\r\nlet grain = {WithGrain};\r\nlet mainTable  = union {Whoused}\r\n    | where timestamp > ago(timeRange)\r\n    {Cohort}\r\n    | where iif('*' in ({UserEvent}), 1==1, name in ({UserEvent}));\r\nlet cohortedTable = mainTable      \r\n        | extend dimension = client_Browser\r\n        | extend dimension = iif(isempty(dimension), \"<undefined>\", dimension)\r\n        | summarize hll = hll({UsersList}) by dimension\r\n        | extend Sessions = dcount_hll(hll)\r\n        | order by Sessions desc\r\n        | serialize rank = row_number()\r\n        | extend dimension = iff(rank > 5, 'Other', dimension)\r\n        | summarize merged = hll_merge(hll) by dimension\r\n        | project [\"Browser version\"] = dimension, Counts = dcount_hll(merged);\r\n        cohortedTable\r\n        ",
        "size": 3,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Browser version",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Counts",
              "formatter": 4,
              "formatOptions": {
                "palette": "turquoise",
                "showIcon": true
              }
            }
          ]
        }
      },
      "customWidth": "33",
      "name": "query - 8"
    },
    {
      "type": 1,
      "content": {
        "json": ""
      },
      "name": "text - 15",
      "styleSettings": {
        "margin": "20px"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "#### ACTIVE SESSIONS"
      },
      "name": "text - 12"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "6a3e3c1f-bb50-4765-8d88-c9abcc97e1c7",
            "version": "KqlParameterItem/1.0",
            "name": "SelectSessions",
            "label": "Select Sessions",
            "type": 2,
            "isRequired": true,
            "query": "datatable(value:string, text:string)[\r\n'| sample 5', 'Show Any 5 Sessions', \r\n'| top 5 by count_', 'Show Most Active Sessions'\r\n]",
            "value": "| sample 5",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "name": "parameters - 10"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let timeRange = {TimeRange};\r\nlet mainTable  = union {Whoused}\r\n        | where timestamp > ago(timeRange)\r\n        {Cohort}\r\n        | where iif('*' in ({UserEvent}), 1==1, name in ({UserEvent}));\r\nlet cohortedTable = mainTable  \r\n        | summarize count() by session_Id\r\n        {SelectSessions}\r\n        | summarize  makelist(session_Id);\r\n        union {Whoused}\r\n        | where timestamp > ago(timeRange)\r\n        | where session_Id in (cohortedTable)\r\n        | summarize eventCount = count(),\r\n        OS = makeset(client_OS), \r\n        Browsers = makeset(client_Browser),\r\n        any(client_City, client_CountryOrRegion)\r\n        by session_Id \r\n        | project Sessions = iff(isempty(session_Id), \"<undefined>\", session_Id), Cities = iff(isempty(any_client_City), \"<undefined>\", any_client_City), Countries = iff(isempty(any_client_CountryOrRegion), \"<undefined>\", any_client_CountryOrRegion), Events = eventCount, OS=trim_start(', ', replace('\",\"', ', ', trim_end('\"]',substring(OS, 2)))), Browsers = trim_start(', ', replace('\",\"', ', ', trim_end('\"]',substring(Browsers, 2))))\r\n        | project Sessions, Location = strcat(Cities, \", \", Countries), Events, OS=iff(OS =='', \"<undefined>\", OS), Browsers = iff(Browsers =='', \"<undefined>\", Browsers)\r\n        | project Sessions, Location, Events = strcat(Events, \" events\"), OS\r\n        | order by Events desc",
        "size": 3,
        "queryType": 0,
        "resourceType": "microsoft.insights/components",
        "visualization": "tiles",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Sessions",
              "formatter": 16,
              "formatOptions": {
                "linkColumn": "Sessions",
                "linkTarget": "SessionTimeline",
                "linkIsContextBlade": true,
                "showIcon": false
              }
            },
            {
              "columnMatch": "Cities",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Countries",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Events",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "OS",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Browsers",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Users",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "SessionTimeline",
                "linkIsContextBlade": true,
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Session Timeline"
              }
            }
          ]
        },
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Sessions",
            "formatter": 7,
            "formatOptions": {
              "linkColumn": "Sessions",
              "linkTarget": "SessionTimeline",
              "linkLabel": "View session timeline",
              "linkIsContextBlade": true,
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "Location",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Events",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto",
              "showIcon": true
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          },
          "secondaryContent": {
            "columnMatch": "OS",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "showBorder": true
        }
      },
      "name": "query - 11"
    }
  ]
}